#!/usr/bin/env node

var optimist = require('optimist'),
    fs = require('fs'),
    path = require('path'),
    logger = require('log4node'),
    agent = require('../lib/agent'),
    monitor_file = require('../lib/lib/monitor_file'),
    file_loader = require('../lib/lib/file_loader'),
    patterns_loader = require('../lib/lib/patterns_loader');

var argv = optimist.argv;

function help() {
  console.log('Syntax : node-logstasth-agent [--log_level=info] [--log_file=file] [--config_file=toto.json] [--config_dir=/etc/config] urls');
  console.log('Url examples: ');
  console.log('- input://stdin://');
  console.log('- input://file://main_input.txt?type=toto');
  console.log('- output://stdout://');
  console.log('- output://file:///tmp/toto.txt');
}

if (argv.help) {
  help();
  process.exit(0);
}

process.on('uncaughtException', function (err) {
  logger.error('Exception has been catch, it\' a bug');
  logger.error('Please submit an issue on https://github.com/bpaquet/node-logstash');
  logger.error('Exception:', err);
  logger.error(err.stack);
});

if (argv.log_file) {
  logger.reconfigure(argv.log_level, argv.log_file);
}
else {
  if (argv.log_level) {
    logger.setLogLevel(argv.log_level);
  }
}

var package_json_file = path.join(__dirname, '..', 'package.json');
var version = JSON.parse(fs.readFileSync(package_json_file))['version'];

logger.notice('Starting node-logstasth-agent', version);

var a = agent.create();

a.on('error', function(module_name, error) {
  logger.error('[' + module_name + '] ' + error);
});

a.on('init_error', function(module_name, error) {
  logger.error('[' + module_name + '] ' + error);
  setTimeout(function() {
    process.exit(1);
  }, 50);
});

patterns_loader.add(path.join(__dirname, '..', 'lib', 'patterns'));

if (argv.patterns_directories) {
  argv.patterns_directories.split(/,/).forEach(function(d) {
    patterns_loader.add(d);
  });
}

function load_config_file(config) {
  if (argv.config_file) {
    logger.info('Loading config file : ' + argv.config_file);
    file_loader.loadFile(argv.config_file, function(err, result) {
      if (err) {
        logger.error('Unable to load config file : ' + err.toString());
        process.exit(1);
      }
      logger.info('File loaded, ' + result.length + ' urls found');
      after_config_file(config.concat(result));
    });
  }
  else {
    after_config_file(config);
  }
}

function after_config_file(config) {
  if (argv.config_dir) {
    logger.info('Loading config files from : ' + argv.config_dir);
    file_loader.loadDirectory(argv.config_dir, function(err, result) {
      if (err) {
        logger.error('Unable to load config from directory : ' + err.toString());
        process.exit(1);
      }
      logger.info('Files loaded from directory, ' + result.length + ' urls found');
      after_config_directory(config.concat(result));
    });
  }
  else {
    after_config_directory(config);
  }
}

function after_config_directory(config) {
  logger.info('Loading config : ' + config.length + ' urls');

  a.loadUrls(config, function(err) {
    if (err) {
      logger.error('Unable to load urls : ' + err);
      process.exit(2);
    }
    logger.info('Config loaded.');
  });
}

load_config_file(['filter://add_source_host://', 'filter://add_timestamp://'].concat(argv._));

setInterval(function() {}, 3600 * 1000);